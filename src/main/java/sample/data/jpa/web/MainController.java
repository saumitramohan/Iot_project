package sample.data.jpa.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import sample.data.jpa.domain.*;
import sample.data.jpa.service.MetricsRepository;
import sample.data.jpa.service.UserRepository;
import java.util.*;
import sample.data.jpa.service.MetricsMetadataRepository;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private MetricsRepository metricsRepository;

	@Autowired
    private MetricsMetadataRepository metricsMetadataRepository;
	
//	@GetMapping(path="/add") // Map ONLY GET Requests
    @RequestMapping(value="user/username/{username}",method =  {RequestMethod.POST, RequestMethod.GET})
    @ResponseBody
	public  ResponseEntity <User> addNewUser (@PathVariable("username") String username, @RequestBody(required = false) UserRequestBody userRequestObject) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
        User user = new User();
        if(userRequestObject!=null) {
            user.setDeviceid(userRequestObject.getDeviceId());
            user.setEmail(username);
            user.setPassword(userRequestObject.getPassword());
            user.setName(userRequestObject.getFullName());
            user.setUsername(username);
            userRepository.save(user);
            return new ResponseEntity<User>(user,HttpStatus.OK);
        }
        else{
		    User newuser =  userRepository.findAllByUsername(username);
		    System.out.print(newuser.getId());
		    return new ResponseEntity<User>(newuser,HttpStatus.OK);
        }




	}

    @RequestMapping(value ="/device/{deviceId}/metric/pulserate/{pulseRate}/temperature/{temperature}/spo2/{spo2}", method = RequestMethod.PUT)
    @ResponseBody
    public ResponseEntity <JSONtoVitalsObjectMapper> addVitalsInformation(@PathVariable("deviceId") String deviceId,
                                                                          @PathVariable("pulseRate") Double pulseRate,
                                                                          @PathVariable("temperature") Double temperature,
                                                                          @PathVariable("spo2") Double spo2){
	        // Now I have JV object .
        // get userid from device ID
        //Metrics metrics = metricsRepository.findAllByDeviceIdOrderByEntryTimeStamp(deviceId);
        // Construct method for metrics repository
        Date entryTimeStamp = new Date();
        ArrayList<Metrics> metricsArrayList = new ArrayList<>();
        Metrics metricsTemp = new Metrics();
        metricsTemp.setEntryTimeStamp(entryTimeStamp);
        metricsTemp.setMetricType(1);   // Temperature
        metricsTemp.setMetricValue(temperature);
        metricsTemp.setDeviceid(deviceId);
        metricsRepository.save(metricsTemp);
        metricsArrayList.add(metricsTemp);



        Metrics metricsPulse = new Metrics();
        metricsPulse.setEntryTimeStamp(entryTimeStamp);
        metricsPulse.setMetricType(2);    // PulseRate
        metricsPulse.setMetricValue(pulseRate);
        metricsPulse.setDeviceid(deviceId);
        metricsRepository.save(metricsPulse);
        metricsArrayList.add(metricsPulse);


        Metrics metricsSPO2 = new Metrics();
        metricsSPO2.setEntryTimeStamp(entryTimeStamp);
        metricsSPO2.setMetricType(3);       // SPO2
        metricsSPO2.setMetricValue(spo2);
        metricsSPO2.setDeviceid(deviceId);
        metricsRepository.save(metricsSPO2);
        metricsArrayList.add(metricsSPO2);


        return new ResponseEntity(metricsArrayList,HttpStatus.OK);
    }
	
//	@GetMapping(path="/all")
//	public @ResponseBody Iterable<User> getAllUsers() {
//		// This returns a JSON or XML with the users
//		return userRepository.findAll();
//	}
//
//	@GetMapping(path="/metrics/all")
//	public @ResponseBody Iterable<Metrics> getAllMetrics(){
//
//		return metricsRepository.findAll();
//	}

    @RequestMapping (value ="/user/username/currentMetric/metric/{metricdescription}", method = RequestMethod.GET)
    public @ResponseBody Iterable<MetricEntityWrapper> getIndividualMetrics(@PathVariable("metricdescription") String metricdescription){
	    // Temperature , spo2, PulseRate
        List <MetricEntityWrapper> MetricEntityWrapperList = new ArrayList<>();
        MetricsMetadata metadataObject = metricsMetadataRepository.findAllByDescription(metricdescription);
        Iterable <Metrics> metrics = metricsRepository.findTop1000ByMetricTypeOrderByEntryTimeStampDesc(metadataObject.getMetricType());
        for(Metrics metric : metrics){
            MetricEntityWrapper meticEntityWrapperObject = new MetricEntityWrapper(metric,metadataObject);
            MetricEntityWrapperList.add(meticEntityWrapperObject);

        }
        return MetricEntityWrapperList;
    }

    @RequestMapping(value="/user/username/currentmetric/{deviceid}", method = RequestMethod.GET)
    public @ResponseBody Iterable<MetricsWrapper> getUserHistoricalData(@PathVariable("deviceid") String deviceId){
	    Iterable <Metrics> metrics = metricsRepository.findTop3ByDeviceidOrderByEntryTimeStampDesc(deviceId);
	    List <MetricsWrapper> MetricsWrapperList = new ArrayList<>();
	    Iterable <MetricsMetadata> metricsMetadata = metricsMetadataRepository.findAll();

	    for (Metrics metric : metrics){
	        Iterable <Metrics> historicalData = metricsRepository.findTop50ByMetricTypeOrderByEntryTimeStampDesc(metric.getMetricType());
	        MetricsWrapper meticsWrapperObject = new MetricsWrapper(metric,historicalData,metricsMetadata);
            MetricsWrapperList.add(meticsWrapperObject);
        }
        return MetricsWrapperList;
    }
}
